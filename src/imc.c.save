/**************************************************************************
 *     InterMUD Communication Addon for Merc/Envy/ROM base MUD (1995)     *
 *                                                                        *
 * In order to use any part of this Addon, you must comply with both the  *
 * original Diku as well as the Merc license. Please refer to those       *
 * licenses for details.                                                  *
 *                                                                        *
 * Permission is granted for the use of this Addon free of charge.        *
 * You may also redistribute this Addon so long as it remains intact.     *
 *                                                                        *
 * You may NOT distribute your own changes of the this Addon without      *
 * written permission of the Author.                                      *
 *                                      James Seng (jseng@pobox.org.sg)   *
 **************************************************************************/

#include <sys/types.h>
#include <sys/time.h>
#include <ctype.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>		/* Er? some system may use strings.h */

#if defined(SYSV)		/* For Solaris 2.4 - Thanks to Walker */
#include <sys/file.h>
#include <sys/filio.h>
#endif

#include <fcntl.h>
#include <sys/ioctl.h> 
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/telnet.h>

#include "merc.h"
#include "imc.h"

int rmud;
int rmud_ninfo;
RMUD_DESCRIPTOR 	rmud_desc[MAX_RMUD];
RMUD_DATA		rmud_info[MAX_RMUD];

/*
 * Eeeks. Here is the start of those crazy hardcoded machine dependent
 * functions
 */
#if defined(sun)
int accept args ((int s, struct sockaddr * addr, int *addrlen));
int bind args ((int s, struct sockaddr * name, int namelen));
void bzero args ((char *b, int length));
int close args ((int fd));
int getpeername args ((int s, struct sockaddr * name, int *namelen));
int getsockname args ((int s, struct sockaddr * name, int *namelen));
int gettimeofday args ((struct timeval * tp, struct timezone * tzp));
int ioctl args(( int d, unsigned long request, char *argp ));
int connect args(( int s, struct sockaddr * name, int namelen ));
int listen args ((int s, int backlog));
int select args ((int width, fd_set * readfds, fd_set * writefds,
                      fd_set * exceptfds, struct timeval * timeout));
int socket args ((int domain, int type, int protocol));
#endif

void init_desc()
{
    int d;

    for ( d = 0; d < MAX_RMUD; d++ ) 
    {
	rmud_desc[d].descriptor = 0;
	rmud_desc[d].state	= SR_DISCONNECT;
	rmud_desc[d].connected  = FALSE;
	rmud_desc[d].inbuf[0]	= '\0';
	rmud_desc[d].outbuf[0]	= '\0';
	rmud_desc[d].outtop	= 0;
	rmud_desc[d].timer	= 0;
    }

    return;
}

void close_rmud( int desc )
{
    close( rmud_desc[desc].descriptor );
    rmud_desc[desc].connected   = FALSE;
    rmud_desc[desc].state	= SR_DISCONNECT;
    rmud_desc[desc].inbuf[0]	= '\0';
    rmud_desc[desc].outbuf[0]	= '\0';
    rmud_desc[desc].outtop	= 0;
    rmud_desc[desc].info	= NULL;

    return;
}

bool write_to_rmudesc( int desc, char *txt, int length )
{
    int iStart;
    int nWrite;
    int nBlock;

    if ( length <= 0 )
	length = strlen(txt);

    for ( iStart = 0; iStart < length; iStart += nWrite )
    {
	nBlock = UMIN( length - iStart, 4096 );
	if ( ( nWrite = write( desc, txt + iStart, nBlock ) ) < 0 )
	    { perror( "write_to_rmudesc" ); return FALSE; }
    } 
    
    return TRUE;
}

bool read_from_rmudesc( int desc )
{
    int iStart;
    char buf[MAX_STRING_LENGTH];

    if ( rmud_desc[desc].incomm[0] != '\0' )
	return TRUE;

    iStart = strlen(rmud_desc[desc].inbuf);
    if ( iStart >= RMUD_IOSIZE - BUF_OVERFLOW )
    {
	sprintf( buf, "%s input overflow!", rmud_desc[desc].host );
	log_string( buf );

	return FALSE;
    }

    for ( ; ; )
    {
	int nRead;
	
	nRead = read( rmud_desc[desc].descriptor, rmud_desc[desc].inbuf+iStart,
	    RMUD_IOSIZE - BUF_OVERFLOW - iStart );
	if ( nRead > 0 )
	{
	    iStart += nRead;
	    if ( rmud_desc[desc].inbuf[iStart-1] == '\n' 
	    ||   rmud_desc[desc].inbuf[iStart-1] == '\r' )
		break;
	}
	else if ( nRead == 0 )
	{
	    log_string( "EOF encounter on read." );
	    return FALSE; 
	}
	else if ( errno == EWOULDBLOCK )
	    break;
	else
	{
	    perror( "Read_from_rmudesc" );
	    return FALSE;
	}
    }

    rmud_desc[desc].inbuf[iStart]='\0';
    return TRUE;
}

void read_from_rbuffer( int desc )
{
    int i, j, k;

    if ( rmud_desc[desc].incomm[0] != '\0' )
	return;

    /*
     * Look for at least one new line.
     */
    for ( i = 0; rmud_desc[desc].inbuf[i] != '\n' 
	&& rmud_desc[desc].inbuf[i] != '\r'; i++ )
    {
	if ( rmud_desc[desc].inbuf[i] == '\0' )
	    return;
    }

    /*
     * Canonical input processing.
     */
    for ( i = 0, k = 0; rmud_desc[desc].inbuf[i] != '\n' && 
	rmud_desc[desc].inbuf[i] != '\r'; i++ )
    {
	if ( k >= MAX_STRING_LENGTH - 2 )
	{
	    /* skip the rest of the line */
	    for ( ; rmud_desc[desc].inbuf[i] != '\0'; i++ )
	    {
		if ( rmud_desc[desc].inbuf[i] == '\n' 
		||   rmud_desc[desc].inbuf[i] == '\r' )
		    break;
	    }
	    rmud_desc[desc].inbuf[i]   = '\n';
	    rmud_desc[desc].inbuf[i+1] = '\0';
	    break;
	}

	if ( rmud_desc[desc].inbuf[i] == '\b' && k > 0 )
	    --k;
	else /* if ( isascii(d->inbuf[i]) && isprint(d->inbuf[i]) ) */
	    rmud_desc[desc].incomm[k++] = rmud_desc[desc].inbuf[i];
    }

    /*
     * Finish off the line.
     */
    if ( k == 0 )
	rmud_desc[desc].incomm[k++] = ' ';
    rmud_desc[desc].incomm[k] = '\0';

    /*
     * Shift the input buffer.
     */
    while ( rmud_desc[desc].inbuf[i] == '\n' 
	||  rmud_desc[desc].inbuf[i] == '\r' )
	i++;

    for ( j = 0; ( rmud_desc[desc].inbuf[j] = rmud_desc[desc].inbuf[i+j] ) != '\0'; j++ )
	;
    return;
}

void write_to_rbuffer( int desc, const char *txt, int length )
{
    /*
     * Find length in case caller didn't.
     */
    if ( length<=0) 
        length = strlen(txt);

    if ( length > BUF_OVERFLOW ) {
/*	bug("write_to_rbuffer: length (%d) > BUF_OVERFLOW", length); */
	return;
    }

    if ( rmud_desc[desc].outtop + length > RMUD_IOSIZE )
    {
	/* Bug( "Buffer overflow. Closing.\n\r", 0 ); */
	close_rmud( desc );
	return;
    }

    strncat( rmud_desc[desc].outbuf, txt, length );

    rmud_desc[desc].outtop += length;
    return;
}

void new_inconnection( int control )
{
    char buf[MAX_STRING_LENGTH];
    struct sockaddr_in sock;
    int size;
    int desc;
    int dfree;
    int addr;

    size = sizeof( sock );
    getsockname( control, (struct sockaddr *) &sock, &size );

    if ( ( desc = accept( control, (struct sockaddr *) &sock, &size) ) < 0 )
    {
	perror( "new_inconnection: accept" );
	return;
    }

    if ( fcntl( desc, F_SETFL, FNDELAY ) == -1 )
    {
	perror( "new_inconnection: fcntl : FNDELAY" );
	return;
    }

    for ( dfree = 0; dfree < MAX_RMUD; dfree ++ )
	if (!rmud_desc[dfree].connected) break;

    if ( dfree >= MAX_RMUD ) {
	close( desc );
	return;
    }

    if ( getpeername( desc, (struct sockaddr *) &sock, &size ) < 0 )
    {
	perror( "new_inconnection: getpeername" );
	close( desc );
	return;
    }

    rmud_desc[dfree].descriptor = desc;
    rmud_desc[dfree].state	= SR_WAITING;
    rmud_desc[dfree].timer	= 0;
    rmud_desc[dfree].connected  = TRUE;
    rmud_desc[dfree].outbuf[0]  = '\0';
    rmud_desc[dfree].inbuf[0]	= '\0';

    addr = ntohl( sock.sin_addr.s_addr );
    sprintf( buf, "%d.%d.%d.%d", 
	( addr >> 24 ) & 0xFF, ( addr >> 16 ) & 0xFF,
	( addr >>  8 ) & 0xFF, ( addr       ) & 0xFF  );

    rmud_desc[dfree].host 	= strdup( buf );

    sprintf( buf, "imc connected on %d from %s\n\r", 
	dfree, rmud_desc[dfree].host );
    log_string( buf );

    return;
}

int new_outconnection( char *address, int port )
{
    unsigned long addr;
    struct hostent *host;
    struct sockaddr_in sa;
    int dfree;
    int sock;
    int x = 1;

    for ( dfree = 0; dfree < MAX_RMUD; dfree ++ )
	if (!rmud_desc[dfree].connected) break;

    if ( dfree >= MAX_RMUD ) {
	return MAX_RMUD;
    }

    if ( isdigit(address[0]) )
    {
	if ( (addr = inet_addr(address)) == -1 )
	    return MAX_RMUD;
    } 
    else
    {
	host = gethostbyname( address );
	if (!host) return MAX_RMUD;
	addr = *(long *)(host->h_addr);
    }

    sa.sin_addr.s_addr 	= addr;
    sa.sin_family	= AF_INET;
    sa.sin_port		= htons( port );

    if ( ( sock = socket( AF_INET, SOCK_STREAM, 0 ) ) < 0 )
    {
	perror( "new_outconnection: socket" );
	return MAX_RMUD;
    }

    if ( connect( sock, (struct sockaddr *) &sa, sizeof(sa) ) < 0 )
    {
	perror( "new_outconnection: connect" );
	return MAX_RMUD;
    }

    ioctl( sock, FIONBIO, &x );

    rmud_desc[dfree].descriptor = sock;
    rmud_desc[dfree].state	= SR_WAITING;
    rmud_desc[dfree].timer	= 0;
    rmud_desc[dfree].connected  = TRUE;
    rmud_desc[dfree].outbuf[0]  = '\0';
    rmud_desc[dfree].inbuf[0]	= '\0';

    return dfree;
}

char *firstparam( char *argument )
{
    static char buf[MAX_STRING_LENGTH];
    char *name;

    name = buf; 
    while ( isspace(*argument) )
	argument++;

    while ( *argument != '\0' ) {
	if ( *argument == '!' ) break;
	*name = LOWER(*argument);
	name++; argument++;
    }
    *name = '\0';

    return buf;
}

char *lastparam( char *argument )
{
    static char buf[MAX_STRING_LENGTH];
    char *name;

    while ( isspace(*argument) )
	argument++;

    name = buf;
    while ( *argument != '\0' ) {
	if ( *argument == '!' ) {
	    name = buf;
	    argument++;
	}
	*name = LOWER(*argument);
	name++; argument++;
    }
    *name = '\0';

    return buf;
}

char *preformat( char *argument )
{
    static char buf[MAX_STRING_LENGTH];
    char *name;

    while ( isspace(*argument) )
	argument++;

    name = buf;
    while ( *argument != '\0' ) {
	if ( *argument == '~' ) {
	    *name = '\n'; name++;
	    *name = '\r'; name++;
	    argument++;
	} else {
	    *name = *argument;
	    name++; argument++;
	}
    }
    *name = '\0';
 
    return buf; 
}

void splitname( char *argument, char *name, char *id )
{
    while ( isspace(*argument) )
	argument++;

    while ( *argument != '\0' ) {
	if ( *argument == '@' ) {
	    *name = '\0';
	    argument++;
	    break;
	}
	*name = LOWER(*argument);
	name++; argument++;
    }

    while ( *argument != '\0' ) {
	*id = LOWER(*argument);
	id++; argument++;
    }
    *id = '\0';

    return;
}

bool verifyhost( char *argument, int desc )
{
    return ( str_cmp( lastparam(argument), rmud_desc[desc].info->name ) );
}

void process_command( int desc )
{
    char *argument;
    char arg1[MAX_STRING_LENGTH];
    char arg2[MAX_STRING_LENGTH];
    char arg3[MAX_STRING_LENGTH];
    char arg4[MAX_STRING_LENGTH];
    char arg5[MAX_STRING_LENGTH];
    char name[MAX_STRING_LENGTH];
    char host[MAX_STRING_LENGTH];
    char buf[MAX_STRING_LENGTH];

    argument = rmud_desc[desc].incomm;

    if ( rmud_desc[desc].state == SR_WAITING ) 
    {
	int i;

	argument = one_argument( argument, arg1 );
	argument = one_argument( argument, arg2 );
	argument = one_argument( argument, arg3 );

	if (str_cmp( arg1, "PW" )) {
	    close_rmud( desc );
	    return;
	}

	for (i=0;i<=rmud_ninfo;i++) {
	    if (!str_cmp( rmud_info[i].name, arg2 )
	    &&  !str_cmp( rmud_info[i].lpasswd, arg3 ) ) {
		if ( is_rconnected( arg2 ) < MAX_RMUD ) {
		    close_rmud( desc );
		    return;
		}
	        rmud_desc[desc].info = &rmud_info[i];
		sprintf(buf, "PW %s %s\n\r", RMUD_NAME, rmud_info[i].rpasswd );
		write_to_rbuffer( desc, buf, 0 );
		rmud_desc[desc].state = SR_CONNECTED;
	        break;
	    }
	}

	if (i>rmud_ninfo) close_rmud( desc ); 

	return;
    } 
    
    if ( rmud_desc[desc].state == SR_PINGING ) 
    {
	return;
    }

    argument = one_argument( argument, arg1 );
    argument = one_argument( argument, arg2 ); 
    argument = one_argument( argument, arg3 );
    argument = one_argument( argument, arg4 );
 
    /* state == SR_CONNECTED */
    arg3[0] = UPPER(arg3[0]); arg4[0] = UPPER(arg4[0]);

    if (verifyhost( arg4, desc )) {
	/*
	sprintf( buf, "Unable to verify host. %s said to be from %s",	
	     rmud_desc[desc].info->name, lastparam( arg4 ) );
	log_string( buf );
	*/
	return;
    }

    if (!str_cmp( arg1, "MS" )) {
        sprintf(buf, "%s@%s rchats '%s'.\n\r", 
	    arg3, firstparam(arg4) , argument );
        rmud_boardcast( buf );
        sprintf(buf, "MS %s %s %s!%s %s\n\r", 
	    arg2, arg3, arg4, RMUD_NAME, argument );
        rmud_rboardcast( buf, desc );
	return;
    }

    if (!str_cmp( arg1, "AC" )) {
	sprintf(buf, "%s@%s %s (remote)\n\r", 
	    arg3, firstparam(arg4), argument );
	rmud_boardcast( buf );
        sprintf(buf, "MS %s %s %s!%s %s\n\r", 
	    arg2, arg3, arg4, RMUD_NAME, argument );
        rmud_rboardcast( buf, desc );
	return;
    }

    if (!str_cmp( arg1, "TE" )) {
	CHAR_DATA *victim;

	argument = one_argument( argument, arg5 );
	splitname( arg5, name, host );

	if (str_cmp(host, RMUD_NAME)) { 
	    sprintf(buf, "TE %s %s %s!%s %s@%s %s\n\r", 
		arg2, arg3, arg4, RMUD_NAME, name, host, argument );
	    rmud_rboardcast(buf, desc );
	    return;
        }

	sprintf(buf, "%s@%s rtells you '%s'.\n\r", 
	    arg3, firstparam(arg4), argument );
        victim = rmud_pecho( name, buf );

	if ( victim == NULL ) {
	    if (!str_cmp( arg3, firstparam(arg4) )) return;
	    sprintf(buf, "TE %s %s %s %s@%s %s is not here\n\r",
		RMUD_NAME, RMUD_NAME, RMUD_NAME, 
		arg3, firstparam(arg4), name );
	    rmud_rboardcast( buf, -1 );
	} else if (!IS_NPC(victim)) {
	    sprintf( buf, "%s@%s", arg3, firstparam(arg4) );
	    free_string( victim->rreply );
	    victim->rreply = str_dup( buf );
	}
	return;
    }

    if (!str_cmp( arg1, "WH" )) {
	if (str_cmp(arg2, RMUD_NAME)) {
	    sprintf(buf, "WH %s %s %s!%s %s\n\r",
		arg2, arg3, arg4, RMUD_NAME, argument );
	    rmud_rboardcast( buf, desc );	
	    return;
        }

	sprintf( buf, "PE %s %s %s %s@%s %s\n\r",
	    RMUD_NAME, RMUD_NAME, RMUD_NAME, 
		arg3, firstparam(arg4), rmud_who(argument) );
        rmud_rboardcast( buf, -1 );
	return;
    }

    if (!str_cmp( arg1, "PE" )) {
	CHAR_DATA *victim;

	argument = one_argument( argument, arg5 );
	splitname( arg5, name, host );

	if (str_cmp(host, RMUD_NAME)) { 
	    sprintf(buf, "PE %s %s %s!%s %s@%s %s\n\r",
		arg2, arg3, arg4, RMUD_NAME, name, host, argument );
	    rmud_rboardcast(buf, desc );
	    return;
        }

        victim = rmud_pecho( name, preformat(argument) );

	if ( victim == NULL ) {
	    if (!str_cmp( arg3, firstparam(arg4) )) return;
	    sprintf(buf, "TE %s %s %s %s@%s %s is not here.\n\r",
		RMUD_NAME, RMUD_NAME, RMUD_NAME, 
		arg3, firstparam(arg4), name );
	    rmud_rboardcast( buf, -1 );
	} 
	return;
    }

    return;
}

void rmud_process( int control )
{
    fd_set in_set;
    fd_set out_set;
    fd_set exc_set;  
    int maxdesc;
    int desc;
    static struct timeval null_time;

    FD_ZERO( &in_set );
    FD_ZERO( &out_set );
    FD_ZERO( &exc_set );
    FD_SET( control, &in_set );
    maxdesc = control;

    for ( desc = 0; desc < MAX_RMUD; desc ++ ) 
	if ( rmud_desc[desc].connected ) 
	{
	    maxdesc = UMAX( maxdesc, rmud_desc[desc].descriptor );
	    FD_SET( rmud_desc[desc].descriptor, &in_set );
	    FD_SET( rmud_desc[desc].descriptor, &out_set );
	    FD_SET( rmud_desc[desc].descriptor, &exc_set );
	}

    if ( select( maxdesc+1, &in_set, &out_set, &exc_set, &null_time ) < 0 )
    {
	perror( "rmud_process: select : poll" );
	exit(1);
    }

    if ( FD_ISSET( control, &in_set ) )
	new_inconnection( control );

    for ( desc = 0; desc < MAX_RMUD; desc++ ) 
	if ( rmud_desc[desc].connected 
	&&   FD_ISSET( rmud_desc[desc].descriptor, &exc_set) ) 
	{
	    FD_CLR( rmud_desc[desc].descriptor, &in_set );
	    FD_CLR( rmud_desc[desc].descriptor, &out_set );
	    rmud_desc[desc].outtop = 0;
	    close_rmud( desc );
	}

    for ( desc = 0; desc < MAX_RMUD; desc++ ) 
	if ( rmud_desc[desc].connected 
	&&   FD_ISSET( rmud_desc[desc].descriptor, &in_set) ) 
    	{
	    if ( !read_from_rmudesc( desc ) )
	    {
		FD_CLR( rmud_desc[desc].descriptor, &out_set );
		rmud_desc[desc].outtop = 0;
		close_rmud( desc );
	    }

	    read_from_rbuffer( desc );
	    while ( rmud_desc[desc].incomm[0] != '\0' )
	    {
		process_command( desc );
	        rmud_desc[desc].incomm[0] = '\0';
		read_from_rbuffer( desc );
	    }
	    rmud_desc[desc].incomm[0] = '\0';
	}

    for ( desc = 0; desc < MAX_RMUD; desc++ ) 
	if ( rmud_desc[desc].connected 
	&&   FD_ISSET( rmud_desc[desc].descriptor, &out_set) ) 
	{
 	    if ( !write_to_rmudesc( rmud_desc[desc].descriptor, 
		rmud_desc[desc].outbuf, rmud_desc[desc].outtop ) ) 
		close_rmud( desc );

	    rmud_desc[desc].outbuf[0] = '\0';
   	    rmud_desc[desc].outtop = 0;
	}

    for ( desc = 0; desc < MAX_RMUD; desc++ ) 
	if ( rmud_desc[desc].connected )
	{
	    if ( rmud_desc[desc].state == SR_DISCONNECT ) 
	    {
		close_rmud( desc );
	    }
	    else if ( rmud_desc[desc].state == SR_WAITING ) 
	    {
		rmud_desc[desc].timer++;
		if ( rmud_desc[desc].timer > RM_TIMEOUT ) close_rmud( desc );
	    }
	    else if ( rmud_desc[desc].state == SR_PINGING )
	    {
		rmud_desc[desc].timer++;
		if ( rmud_desc[desc].timer > RM_TIMEOUT ) close_rmud( desc );
	    }
        }
		
   return;

}

void load_rmud()
{
    char buf[MAX_STRING_LENGTH];
    FILE *fp;

    fclose( fpReserve );
    log_string( "Loading IMC information" );

    rmud_ninfo = 0;

    sprintf( buf, "%s", RMUD_FILE ); 
    if ( ( fp = fopen( buf, "r" ) ) != NULL ) 
    {
	for ( ; ; )
	{
	    char *word;
	    word = fread_word( fp );
	    if ( !str_cmp( word, "END"  ) ) {
		break;
	    }
	    rmud_info[rmud_ninfo].name = str_dup( word );

	    word = fread_word( fp );
	    rmud_info[rmud_ninfo].lpasswd = str_dup( word );

	    word = fread_word( fp );
	    rmud_info[rmud_ninfo].rpasswd = str_dup( word );

	    word = fread_word( fp );
	    rmud_info[rmud_ninfo].host = str_dup( word );

	    rmud_info[rmud_ninfo].port = fread_number( fp );

	    rmud_info[rmud_ninfo].flag = fread_number( fp );

	    rmud_ninfo++;
	}
	rmud_ninfo--;
	fclose( fp );
    }

    fpReserve = fopen( NULL_FILE, "r" );

    {
    int i;
    char buf[MAX_STRING_LENGTH];
    for ( i = 0; i <= rmud_ninfo; i++ ) {
	sprintf(buf, "%s %s %s %d", 
		rmud_info[i].name, 
		rmud_info[i].lpasswd,
		rmud_info[i].rpasswd,
		rmud_info[i].flag );
	log_string( buf );
    }
    }

    return;
}

int is_rconnected( char *name )
{
   int i;

   for (i=0; i<MAX_RMUD;i++) {
	if ( rmud_desc[i].state == SR_CONNECTED
	&&   rmud_desc[i].connected
	&&   !str_cmp( rmud_desc[i].info->name, name ) ) {
	    break;
	}
   }

   return i;
}

void rmud_autoconnect()
{
    int ninfo;

    for (ninfo=0; ninfo <= rmud_ninfo; ninfo++) {
	if ( !IS_SET(rmud_info[ninfo].flag, RF_CLIENT)
     	&&   is_rconnected( rmud_info[ninfo].name ) >= MAX_RMUD ) {
	    rmud_connect( ninfo );
	}
    }

    return;
}

/*
 * This function is the one which does the formating of rwho replies
 * Some mud dont have race, some mud dont have class and some mud
 * dont even have level. To maintain compatibility, i only uses two field
 * ie name and title. Feel free to modify the sprintf() inside this
 * function to include more information if you wish.
 *
 * Do take note of the BUF_OVERFLOW limitation. Each reply is limited
 * to only 4096 bytes. (that is why I only return 10 person names per
 * request). When adding more stuff to return to the remote player
 * make sure you keep yourself within this limit.
 *                                             James Seng
 */
char *rmud_who( char *argument )
{
    char arg1[MAX_STRING_LENGTH];
    char arg2[MAX_STRING_LENGTH];
    char buf[MAX_STRING_LENGTH];
    static char output[MAX_STRING_LENGTH];
    int  start, stop, count;
    DESCRIPTOR_DATA *d;
    CHAR_DATA *victim;

    argument = one_argument( argument, arg1 );
    argument = one_argument( argument, arg2 );

    if ( arg1[0] == '\0' ) {
	start = 1; stop = 10;
    } else if ( !str_cmp( arg1, "next" ) && is_number( arg2 ) ) {
	start = atoi( arg2 ) + 1; stop = start + 9;
    } else {
	sprintf(output, "Invalid paramater. rwho mudid [next] <number>~" );
	return output;
    }

    *output = '\0';
    count=0;
    for ( d = descriptor_list; d!= NULL; d = d->next ) {
	if ( d->connected == CON_PLAYING
	&&   (victim = d->original ? d->original : d->character) != NULL
	&&   !IS_NPC(victim) ) 
	{
	    count++;
	    if ( start <= count && count <= stop ) 
	     {
		if(!victim->invis_level)
		{
		sprintf(buf, "%s %s~", 
		    victim->name, 
		    victim->pcdata->title );		
		strcat(output, buf);
		}
	    }
        }
    }

    sprintf(buf, "~RWHO for %s [%d to %d - Total %d]~", 
	RMUD_NAME, start, stop, count );
    strcat(output, buf);

    return output;
}

/* 
 * This is the rmud_who which i used on HOTL
 * so it probably wont work for you 8)
char *nocolor( char *argument )
{
    static char buf[MAX_STRING_LENGTH];
    char *name;

    while ( isspace(*argument) )
	argument++;

    name = buf;
    while ( *argument != '\0' ) {
	if ( *argument == '@' ) {
	    argument++;
	    if ( *argument == '@' ) {
		*name = '@'; name ++;
	    }
	    if ( *argument != '\0' ) argument++;
	} else {
	    *name = *argument;
	    name++; argument++;
	}
    }
    *name = '\0';

    return buf;
}

char *rmud_who( char *argument )
{
    char arg1[MAX_STRING_LENGTH];
    char arg2[MAX_STRING_LENGTH];
    char buf[MAX_STRING_LENGTH];
    static char output[MAX_STRING_LENGTH];
    int  start, stop, count;
    DESCRIPTOR_DATA *d;
    CHAR_DATA *victim;

    argument = one_argument( argument, arg1 );
    argument = one_argument( argument, arg2 );

    if ( arg1[0] == '\0' ) {
	start = 1; stop = 10;
    } else if ( !str_cmp( arg1, "next" ) && is_number( arg2 ) ) {
	start = atoi( arg2 ) + 1; stop = start + 9;
    } else {
	sprintf(output, "Invalid paramater. rwho mudid [next] <number>~" );
	return output;
    }

    *output = '\0';
    count=0;
    for ( d = descriptor_list; d!= NULL; d = d->next ) {
	if ( d->connected == CON_PLAYING
	&&   (victim = d->original ? d->original : d->character) != NULL
	&&   !IS_NPC(victim) ) 
	{
	    count++;
	    if ( start <= count && count <= stop ) {
		sprintf(buf, "[%2d %s %s] %s %s~", 
		    victim->level,
		    pc_race_table[victim->race].who_name,
		    class_table[victim->class].who_name,
		    victim->name, 
		    nocolor(victim->pcdata->title) );		
		strcat(output, buf);
	    }
        }
    }

    sprintf(buf, "~RWHO for %s [%d to %d - Total %d]~", 
	RMUD_NAME, start, stop, count );
    strcat(output, buf);

    return output;
}
*/
